(* 固定長10進整数 *)

open import "std.bfr"
open import "future.bfr"

let base = 10

let gen_build n st = [
  $build {
    fixed: array(n) {
      digit: cell;  // ビッグエンディアン
      i: index; // 各操作の最後にゼロに戻す
    }
  }
  *st (n, fixed)
]


let gen_move_last (n, arr) = [
  **let i = arr@i in $
  $dive i [
    $alloc { c }
    + c (n - 1)
    ! c [ - c  > i ]
  ]
]

// 現在のインデックスのある桁からdigitを繰り上げる
// インデックスはゼロになる
let gen_carry_from_curr (_, arr) = [
  **let i = arr@i in $
  $dive i [
    // i=1 まで繰り上げ
    $iloop i [
      *gen_const_div
        base i:digit [ + i:(-1)digit ]
      < i
    ]
    // i=0の桁は繰り上げない
    *gen_const_div base i:digit []
  ]
]

let gen_add_const m fi = [
  **let _, arr = fi in $
  *gen_move_last fi
  + arr@i:digit m
  *gen_carry_from_curr fi
]

let gen_incr fi = gen_add_const 1 fi

let gen_print_unsigned (n, arr) = [
  **let i = arr@i in $
  $dive i [
    $alloc { zc; c }
    + zc (n - 1)
    // ゼロ以外の桁が現れる・最後の桁に到達するまで出力しない
    ! zc [
      ? i:digit
        [ *gen_repeat zc [ + c ] ]
        [ - zc  > i ]
    ]
    // 残りの桁を出力する
    + c
    ! c [
      + i:digit '0'
      . i:digit
      - i:digit '0'
      - c
      ! c [ *gen_repeat c [ + zc ]  > i ]
      *gen_repeat zc [ + c ]
    ]
  ]
  *gen_reset_index i
]

// 各桁反転
let gen_flip fi = [
  **let n, arr = fi in $
  *gen_move_last fi
  *gen_foreach arr@i [
    $dive arr@i [
      $alloc { nc }
      + nc (base - 1)
      *gen_repeat arr@i:digit [ - nc ]
      *gen_repeat nc [ + arr@i:digit ]
    ]
  ]
]

let gen_neg fi = [
  *gen_flip fi
  *gen_incr fi
]

let gen_if_neg (_, arr) neg non_neg = [
  ? arr:(0)digit [ *neg ] [ *non_neg ]
]

let gen_abs fi = [
  *gen_if_neg fi
    [ *gen_neg fi ]
    []
]


let gen_print fi = [
  **let _, arr = fi in $
  $alloc { is_neg }
  ? arr:(0)digit
    [ + is_neg '-'  . is_neg
      *gen_neg fi
    ]
    []
  *gen_print_unsigned fi
  ! is_neg [
    *gen_del is_neg
    *gen_neg fi
  ]
]


(* 左シフト
   ただしインデックスが右に残る
*)
let gen_lshift_to_right (n, arr) = [
  **let i = arr@i in $
  $dive i [
    $alloc { c }
    + c (n - 1)
    // 左端の桁は削除する
    *gen_del i:digit
    // それ以降の桁を左にずらす
    ! c [
      *gen_repeat i:(1)digit [ + i:digit ]
      > i
      - c
    ]
  ]
]

(* 桁数だけ左シフトして入力された数を格納する
   元の数がゼロでないと入力を正しく受けられないことに留意
*)
let gen_input_unsigned ed fi = [
  $alloc { ip }
  , ip
  - ip ed
  ! ip [
    - ip ('0' - ed)
    *gen_lshift_to_right fi
    **let _, arr = fi in $
    *gen_repeat ip [ + arr@i:digit ]
    *gen_reset_index arr@i
    , ip
    - ip ed
  ]
]

let gen_input ed fi = [
  $alloc { is_neg; ip }
  + is_neg
  , ip  - ip '-'
  ! ip [
    - ip ('0' - '-')
    - is_neg
    *gen_move_last fi
    **let _, arr = fi in $
    *gen_repeat ip [ + arr@i:digit ]
    *gen_reset_index arr@i
  ]
  *gen_input_unsigned ed fi
  ! is_neg [
    - is_neg
    *gen_neg fi
  ]
]

let gen_add src dest = [
  **let sn, sarr = src in
    let dn, darr = dest in $
  *gen_move_last dest
  *gen_move_last src
  // 足す
  $dive sarr@i [
    $iloop sarr@i [
      *gen_repeat_restore sarr@i:digit
        [ + darr@i:digit ]
      < sarr@i
      < darr@i
    ]
    *gen_repeat_restore sarr@i:digit
      [ + darr@i:digit ]
  ]
  // 桁が違う場合に符号拡張
  *(if sn < dn then $
      ? sarr:(0)digit
        [ $iloop darr@i
            [ < darr@i  + darr@i:digit (base - 1) ]
        ]
        [ *gen_reset_index darr@i ]
    else if sn = dn then []
    else "error" // TODO: assert文の作成
  )
  // 繰り上げ
  *gen_move_last dest
  *gen_carry_from_curr dest
]

let gen_mul a b dest = [
  **let an, aarr = a in
    let bn, barr = b in
    let dn, darr = dest in $
  *(if an + bn = dn then [] else "error")
  *gen_move_last dest
  $dive darr@i [
    $alloc { dc }
    // a * ...
    *gen_move_last a
    *gen_foreach aarr@i [
      // a * b
      *gen_move_last b
      *gen_for_index barr@i
        [ < barr@i  < darr@i ]
        [
          $dive barr@i [ *gen_repeat_restore barr@i:digit [
            $dive aarr@i [ *gen_repeat_restore aarr@i:digit [
              + darr@i:digit
            ]]
          ]]
        ]
      // a * (b の符号拡張)
      ? barr@i:digit
        [
          $iloop darr@i [
            < darr@i  + dc
            $dive aarr@i [ *gen_repeat_restore aarr@i:digit [
              + darr@i:digit (base - 1)
            ]]
          ]
        ]
        [
          $iloop darr@i [ < darr@i  + dc ]
        ]
      // 繰り上げ
      // 本当はまとめて繰り上げたかったが、オーバーフローするのでやむなし
      *gen_move_last dest
      *gen_carry_from_curr dest
      + dc (bn - 2)
      *gen_repeat dc [ > darr@i ]
    ]
    // (a の符号拡張) * b
    ? aarr@i:digit
      [
        // * b
        > darr@i
        $iloop darr@i [
          < darr@i
          *gen_move_last b
          *gen_for_index darr@i
            [ < barr@i  < darr@i  + dc ]
            [
              $dive barr@i [ *gen_repeat_restore barr@i:digit [
                + darr@i:digit (base - 1)
              ]]
            ]
          *gen_move_last dest
          *gen_carry_from_curr dest
          *gen_repeat dc [ > darr@i ]
          *gen_reset_index barr@i
        ]
      ]
      [ *gen_reset_index darr@i ]
  ]
]


// input: a b
// output: (a + b) (a * b)
codegen [
  **gen_build 5 @@ fun a -> $
  **gen_build 5 @@ fun b -> $
  **gen_build 10 @@ fun c -> $

  *gen_input ' ' a
  *gen_input '\n' b

  *gen_mul a b c
  *gen_add a b

  *gen_print b
  *gen_puts " "
  *gen_print c
]